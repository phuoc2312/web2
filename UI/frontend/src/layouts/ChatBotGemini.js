import React, { useState, useRef, useEffect } from 'react';
import { GET_ALL, LOGIN } from './../api/apiService';
import axios from 'axios';
import '../assets/css/ChatBotGemini.css';

const ChatBotGemini = () => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [loading, setLoading] = useState(false);
    const [userEmail, setUserEmail] = useState(localStorage.getItem('authEmail') || null);
    const chatBoxRef = useRef(null);

    // T·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi
    useEffect(() => {
        if (chatBoxRef.current) {
            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
        }
    }, [messages]);

    // H√†m ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông n·∫øu token h·∫øt h·∫°n
    const authenticate = async () => {
        try {
            if (!userEmail) {
                throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.');
            }
            const response = await LOGIN({
                email: userEmail,
                password: 'yourpassword', // Thay b·∫±ng m·∫≠t kh·∫©u th·ª±c ho·∫∑c y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p
            });
            const token = response.data.token;
            localStorage.setItem('authToken', token);
            return token;
        } catch (error) {
            setMessages(prev => [...prev, { role: 'bot', content: '‚ö†Ô∏è L·ªói ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.' }]);
            return null;
        }
    };

    const handleSend = async () => {
        if (!input.trim()) return;

        const newUserMessage = { role: 'user', content: input };
        setMessages(prev => [...prev, newUserMessage]);
        setInput('');
        setLoading(true);

        try {
            const lowerInput = input.toLowerCase();

            // 1. X·ª≠ l√Ω c√¢u h·ªèi t√¨m s·∫£n ph·∫©m theo t√™n ho·∫∑c th√¥ng tin s·∫£n ph·∫©m
            if (lowerInput.includes('t√¨m') || lowerInput.includes('th√¥ng tin') || lowerInput.includes('s·∫£n ph·∫©m') || lowerInput.includes('gi√°')) {
                // Ki·ªÉm tra ID s·∫£n ph·∫©m tr∆∞·ªõc
                const idMatch = lowerInput.match(/s·∫£n ph·∫©m\s+(\d+)|#(\d+)/i);
                if (idMatch) {
                    const productId = idMatch[1] || idMatch[2];
                    try {
                        const response = await axios.get(`http://localhost:8080/api/public/products/${productId}`);
                        const product = response.data;
                        const price = product.discount > 0 
                            ? (product.price * (100 - product.discount) / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
                            : product.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                        const originalPrice = product.discount > 0 
                            ? product.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }) 
                            : null;
                        const reply = `Th√¥ng tin s·∫£n ph·∫©m #${productId}:<br/><br/>üì± <a href="/product/${productId}">${product.productName}</a><br/>üí∞ Gi√°: ${price}${product.discount > 0 ? ` <span style="text-decoration: line-through; color: gray;">${originalPrice}</span> (-${product.discount}%)` : ''}<br/>üìù M√¥ t·∫£: ${product.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}<br/>üìã Danh m·ª•c: ${product.category?.categoryName || 'Kh√¥ng x√°c ƒë·ªãnh'}<br/>üîó Xem chi ti·∫øt: <a href="/product/${productId}">T·∫°i ƒë√¢y</a>`;
                        setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                        return;
                    } catch (error) {
                        setMessages(prev => [...prev, {
                            role: 'bot',
                            content: `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m #${productId}. Vui l√≤ng ki·ªÉm tra l·∫°i ID.`
                        }]);
                        return;
                    }
                }

                // X·ª≠ l√Ω t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
                const nameMatch = lowerInput.match(/(?:t√¨m|th√¥ng tin|gi√°|s·∫£n ph·∫©m)\s*(.+)/i);
                if (nameMatch) {
                    const keyword = nameMatch[1].trim();
                    const response = await GET_ALL(`public/products/keyword/${encodeURIComponent(keyword)}`, {
                        pageNumber: 0,
                        pageSize: 5,
                        sortBy: 'id',
                        sortOrder: 'asc',
                    });
                    const products = response.content || [];
                    if (products.length === 0) {
                        setMessages(prev => [...prev, {
                            role: 'bot',
                            content: `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t√™n "${keyword}". Vui l√≤ng th·ª≠ l·∫°i.`
                        }]);
                        return;
                    }
                    const productList = products.map(p => {
                        const price = p.discount > 0 
                            ? (p.price * (100 - p.discount) / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
                            : p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                        const originalPrice = p.discount > 0 
                            ? p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }) 
                            : null;
                        return `üì± <a href="/product/${p.productId}">${p.productName}</a><br/>üí∞ Gi√°: ${price}${p.discount > 0 ? ` <span style="text-decoration: line-through; color: gray;">${originalPrice}</span> (-${p.discount}%)` : ''}<br/>üìù M√¥ t·∫£: ${p.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}<br/>üìã Danh m·ª•c: ${p.category?.categoryName || 'Kh√¥ng x√°c ƒë·ªãnh'}<br/>üîó Xem chi ti·∫øt: <a href="/product/${p.productId}">T·∫°i ƒë√¢y</a>`;
                    }).join('<br/><br/>');
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Th√¥ng tin s·∫£n ph·∫©m li√™n quan ƒë·∫øn "${keyword}":<br/><br/>${productList}`
                    }]);
                    return;
                }
            }

            // 2. X·ª≠ l√Ω c√¢u h·ªèi t·ªïng qu√°t v·ªÅ trang web
            if (lowerInput.includes('m·ªçi th·ª©') || lowerInput.includes('trang web') || lowerInput.includes('c√≥ g√¨')) {
                let reply = `T·ªïng quan v·ªÅ trang web:<br/><br/>`;
                
                const productParams = { pageNumber: 0, pageSize: 3, sortBy: 'id', sortOrder: 'asc' };
                const productResponse = await GET_ALL('public/products', productParams);
                const products = productResponse.content || [];
                reply += `üì± <strong>S·∫£n ph·∫©m</strong>: C√≥ ${productResponse.totalElements || 0} s·∫£n ph·∫©m. V√≠ d·ª•:<br/>${products.map(p => `<a href="/product/${p.productId}">${p.productName}</a> - ${p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}`).join('<br/>') || 'Kh√¥ng c√≥ s·∫£n ph·∫©m.'}<br/><br/>`;

                const promoParams = { pageNumber: 0, pageSize: 3, sortBy: 'productId', sortOrder: 'asc' };
                const promoResponse = await GET_ALL('public/products/promotions', promoParams);
                const promos = promoResponse.content || [];
                reply += `üéâ <strong>S·∫£n ph·∫©m khuy·∫øn m√£i</strong>:<br/>${promos.map(p => `<a href="/product/${p.productId}">${p.productName}</a> - ${(p.price * (100 - p.discount) / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })} (-${p.discount}%)`).join('<br/>') || 'Kh√¥ng c√≥ khuy·∫øn m√£i.'}<br/><br/>`;

                const categoryParams = { pageNumber: 0, pageSize: 3, sortBy: 'categoryId', sortOrder: 'asc' };
                const categoryResponse = await GET_ALL('public/categories', categoryParams);
                const categories = categoryResponse.content || [];
                reply += `üìã <strong>Danh m·ª•c</strong>:<br/>${categories.map(c => `${c.categoryName} - ${c.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`).join('<br/>') || 'Kh√¥ng c√≥ danh m·ª•c.'}<br/><br/>`;

                if (userEmail) {
                    let token = localStorage.getItem('authToken');
                    if (!token) {
                        token = await authenticate();
                        if (!token) {
                            reply += `üõí <strong>Gi·ªè h√†ng</strong>: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ xem.<br/><br/>üì¶ <strong>ƒê∆°n h√†ng</strong>: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ xem.`;
                        }
                    }
                    if (token) {
                        let cartId = localStorage.getItem('cartId');
                        if (!cartId) {
                            const cartResponse = await axios.post(
                                `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/carts`,
                                {},
                                { headers: { Authorization: `Bearer ${token}` } }
                            );
                            cartId = cartResponse.data.cartId;
                            localStorage.setItem('cartId', cartId);
                        }
                        const cartResponse = await axios.get(
                            `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/carts/${cartId}`,
                            { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                        );
                        const cartItems = cartResponse.data.products || [];
                        reply += `üõí <strong>Gi·ªè h√†ng</strong>:<br/>${cartItems.map(item => `<a href="/product/${item.productId}">${item.productName}</a> x${item.cartItemQuantity}`).join('<br/>') || 'Gi·ªè h√†ng tr·ªëng.'}<br/><br/>`;

                        const orderResponse = await axios.get(
                            `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/orders`,
                            { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                        );
                        const orders = orderResponse.data || [];
                        reply += `üì¶ <strong>ƒê∆°n h√†ng</strong>:<br/>${orders.map(o => `ƒê∆°n h√†ng #${o.orderId} - ${o.orderStatus} - ${o.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}`).join('<br/>') || 'Kh√¥ng c√≥ ƒë∆°n h√†ng.'}<br/><br/>`;
                    }
                } else {
                    reply += `üõí <strong>Gi·ªè h√†ng</strong>: Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem.<br/><br/>üì¶ <strong>ƒê∆°n h√†ng</strong>: Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem.<br/><br/>`;
                }

                if (userEmail) {
                    let token = localStorage.getItem('authToken');
                    if (!token) {
                        token = await authenticate();
                    }
                    if (token) {
                        const userResponse = await axios.get(
                            `http://localhost:8080/api/public/users/email/${encodeURIComponent(userEmail)}`,
                            { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                        );
                        const user = userResponse.data;
                        reply += `üë§ <strong>Th√¥ng tin c√° nh√¢n</strong>:<br/>Email: ${user.email}<br/>T√™n: ${user.firstName} ${user.lastName}<br/>ƒê·ªãa ch·ªâ: ${formatAddress(user.address)}`;
                    } else {
                        reply += `üë§ <strong>Th√¥ng tin c√° nh√¢n</strong>: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ xem.`;
                    }
                } else {
                    reply += `üë§ <strong>Th√¥ng tin c√° nh√¢n</strong>: Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem.`;
                }

                setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                return;
            }

            // 3. X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m khuy·∫øn m√£i
            if (lowerInput.includes('khuy·∫øn m√£i') || lowerInput.includes('gi·∫£m gi√°') || lowerInput.includes('promotion')) {
                const params = {
                    pageNumber: 0,
                    pageSize: 10,
                    sortBy: 'productId',
                    sortOrder: 'asc',
                };
                const response = await GET_ALL('public/products/promotions', params);
                const products = response.content || [];
                const productList = products.map(p => {
                    const originalPrice = p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                    const discountedPrice = (p.price * (100 - p.discount) / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                    return `üì± <a href="/product/${p.productId}">${p.productName}</a> - ${discountedPrice} <span style="text-decoration: line-through; color: gray;">${originalPrice}</span> (-${p.discount}%)`;
                }).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `S·∫£n ph·∫©m khuy·∫øn m√£i:<br/><br/>${productList || 'Kh√¥ng c√≥ s·∫£n ph·∫©m khuy·∫øn m√£i.'}`
                }]);
                return;
            }

            // 4. X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ danh m·ª•c
            if (lowerInput.includes('danh m·ª•c') || lowerInput.includes('category')) {
                const params = { pageNumber: 0, pageSize: 100, sortBy: 'categoryId', sortOrder: 'asc' };
                const response = await GET_ALL('public/categories', params);
                const categories = response.content || [];
                const categoryList = categories.map(c => 
                    `üìã ${c.categoryName} - ${c.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Danh s√°ch danh m·ª•c:<br/><br/>${categoryList || 'Kh√¥ng c√≥ danh m·ª•c n√†o.'}`
                }]);
                return;
            }

            // 5. X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ gi·ªè h√†ng
            if (lowerInput.includes('gi·ªè h√†ng') || lowerInput.includes('cart')) {
                if (!userEmail) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: '‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng. <a href="/login">ƒêƒÉng nh·∫≠p</a>'
                    }]);
                    return;
                }
                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }
                let cartId = localStorage.getItem('cartId');
                if (!cartId) {
                    const response = await axios.post(
                        `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/carts`,
                        {},
                        { headers: { Authorization: `Bearer ${token}` } }
                    );
                    cartId = response.data.cartId;
                    localStorage.setItem('cartId', cartId);
                }
                const response = await axios.get(
                    `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/carts/${cartId}`,
                    { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                );
                const cartItems = response.data.products || [];
                const cartList = cartItems.map(item => 
                    `üõí <a href="/product/${item.productId}">${item.productName}</a> x${item.cartItemQuantity} - ${(item.price * item.cartItemQuantity).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Gi·ªè h√†ng c·ªßa b·∫°n:<br/><br/>${cartList || 'Gi·ªè h√†ng tr·ªëng.'}`
                }]);
                return;
            }

            // 6. X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒë∆°n h√†ng
            if (lowerInput.includes('ƒë∆°n h√†ng') || lowerInput.includes('order')) {
                if (!userEmail) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: '‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng. <a href="/login">ƒêƒÉng nh·∫≠p</a>'
                    }]);
                    return;
                }
                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }
                const response = await axios.get(
                    `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/orders`,
                    { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                );
                const orders = response.data || [];
                const orderList = orders.map(o => 
                    `üì¶ ƒê∆°n h√†ng #${o.orderId} - ${o.orderStatus} - ${o.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Danh s√°ch ƒë∆°n h√†ng:<br/><br/>${orderList || 'Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.'}`
                }]);
                return;
            }

            // 7. X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th√¥ng tin c√° nh√¢n
            if (lowerInput.includes('th√¥ng tin') || lowerInput.includes('profile') || lowerInput.includes('t√†i kho·∫£n')) {
                if (!userEmail) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: '‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin c√° nh√¢n. <a href="/login">ƒêƒÉng nh·∫≠p</a>'
                    }]);
                    return;
                }
                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }
                const response = await axios.get(
                    `http://localhost:8080/api/public/users/email/${encodeURIComponent(userEmail)}`,
                    { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                );
                const user = response.data;
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Th√¥ng tin c√° nh√¢n:<br/><br/>üìß Email: ${user.email}<br/>üë§ T√™n: ${user.firstName} ${user.lastName}<br/>üìç ƒê·ªãa ch·ªâ: ${formatAddress(user.address)}`
                }]);
                return;
            }

            // 8. G·ªçi Gemini AI cho c√°c c√¢u h·ªèi kh√°c
            const res = await axios.post(
                'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyAgCIH5TI_2GaNBzPRLI55Wk4VGWL84jpk',
                {
                    contents: [{ parts: [{ text: input }] }]
                },
                {
                    headers: { 'Content-Type': 'application/json' }
                }
            );
            const geminiResponse = res.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu.';
            setMessages(prev => [...prev, { role: 'bot', content: geminiResponse }]);
        } catch (error) {
            console.error('L·ªói:', error);
            if (error.response?.status === 401) {
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: '‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i. <a href="/login">ƒêƒÉng nh·∫≠p</a>'
                }]);
            } else if (error.response?.status === 404) {
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: '‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra c√¢u h·ªèi.'
                }]);
            } else {
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: '‚ö†Ô∏è L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau!'
                }]);
            }
        } finally {
            setLoading(false);
        }
    };

    // H√†m ƒë·ªãnh d·∫°ng ƒë·ªãa ch·ªâ
    const formatAddress = (address) => {
        if (!address) return 'Ch∆∞a c·∫≠p nh·∫≠t';
        const { street, buildingName, city, state, country, pincode } = address;
        return [street, buildingName, city, state, country, pincode]
            .filter(Boolean)
            .join(', ');
    };

    // X·ª≠ l√Ω nh·∫•n Enter ƒë·ªÉ g·ª≠i
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !loading) {
            handleSend();
        }
    };

    return (
        <div className="chatbot-container">
            <h2 className="chatbot-title">MHP Chatbot</h2>
            <div className="chatbox" ref={chatBoxRef}>
                {messages.map((msg, index) => (
                    <div
                        key={index}
                        className={`message ${msg.role === 'user' ? 'user-message' : 'bot-message'}`}
                        dangerouslySetInnerHTML={{
                            __html: `<strong>${msg.role === 'user' ? 'B·∫°n: ' : 'Bot: '}</strong>${msg.content}`
                        }}
                    />
                ))}
            </div>
            <div className="input-area">
                <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    disabled={loading}
                />
                <button
                    onClick={handleSend}
                    disabled={loading}
                >
                    {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i'}
                </button>
            </div>
        </div>
    );
};

export default ChatBotGemini;