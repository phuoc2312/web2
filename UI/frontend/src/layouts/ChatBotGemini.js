import React, { useState, useRef, useEffect } from 'react';
import { GET_ALL, LOGIN } from './../api/apiService';
import axios from 'axios';
import '../assets/css/ChatBotGemini.css';

const ChatBotGemini = () => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [loading, setLoading] = useState(false);
    const [userEmail, setUserEmail] = useState(localStorage.getItem('authEmail') || null);
    const chatBoxRef = useRef(null);

    // T·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi
    useEffect(() => {
        if (chatBoxRef.current) {
            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
        }
    }, [messages]);

    // H√†m ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông n·∫øu token h·∫øt h·∫°n
    const authenticate = async () => {
        try {
            if (!userEmail) {
                throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.');
            }
            const response = await LOGIN({
                email: userEmail,
                password: 'yourpassword', // TODO: Thay b·∫±ng c∆° ch·∫ø an to√†n
            });
            const token = response.data.token;
            localStorage.setItem('authToken', token);
            return token;
        } catch (error) {
            setMessages(prev => [...prev, { role: 'bot', content: '‚ö†Ô∏è L·ªói ƒëƒÉng nh·∫≠p. Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.' }]);
            return null;
        }
    };

    // H√†m ƒë·ªãnh d·∫°ng ƒë·ªãa ch·ªâ
    const formatAddress = (address) => {
        if (!address) return 'Ch∆∞a c·∫≠p nh·∫≠t';
        const { street, buildingName, city, state, country, pincode } = address;
        return [street, buildingName, city, state, country, pincode]
            .filter(Boolean)
            .join(', ');
    };

    // H√†m ƒë·ªãnh d·∫°ng s·∫£n ph·∫©m
    const formatProduct = (p) => {
        const price = p.discount > 0
            ? (p.price * (100 - p.discount) / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
            : p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        const originalPrice = p.discount > 0
            ? p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
            : null;
        return `üì± <a href="/product/${p.productId}">${p.productName}</a><br/>üí∞ Gi√°: ${price}${p.discount > 0 ? ` <span style="text-decoration: line-through; color: gray;">${originalPrice}</span> (-${p.discount}%)` : ''}<br/>üìù M√¥ t·∫£: ${p.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}<br/>üìã Danh m·ª•c: ${p.category?.categoryName || 'Kh√¥ng x√°c ƒë·ªãnh'}<br/>üîó Xem chi ti·∫øt: <a href="/product/${p.productId}">T·∫°i ƒë√¢y</a>`;
    };

    const handleSend = async () => {
        if (!input.trim()) return;

        const newUserMessage = { role: 'user', content: input };
        setMessages(prev => [...prev, newUserMessage]);
        setInput('');
        setLoading(true);

        try {
            const lowerInput = input.toLowerCase().trim();

            // 1. Ch√†o h·ªèi v√† gi·ªõi thi·ªáu
            if (lowerInput.includes('ch√†o') || lowerInput.includes('hi') || lowerInput.includes('hello')) {
                const reply = `Ch√†o b·∫°n! üòä T√¥i l√† MHP Chatbot, s·∫µn s√†ng gi√∫p b·∫°n kh√°m ph√° MHP Store. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m, xem khuy·∫øn m√£i, ki·ªÉm tra ƒë∆°n h√†ng hay bi·∫øt th√™m v·ªÅ ch√∫ng t√¥i? H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!`;
                setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                return;
            }

            // 2. S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
            if (lowerInput.includes('b√°n ch·∫°y') || lowerInput.includes('n·ªïi b·∫≠t') || lowerInput.includes('hot')) {
                const params = { pageNumber: 0, pageSize: 3, sortBy: 'quantity', sortOrder: 'asc' };
                const response = await GET_ALL('public/products', params);
                const products = response.content || [];
                if (products.length === 0) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m n√†o n·ªïi b·∫≠t. H√£y xem <a href="/products">t·∫•t c·∫£ s·∫£n ph·∫©m</a> nh√©!`
                    }]);
                    return;
                }
                const productList = products.map(formatProduct).join('<br/><br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t:<br/><br/>${productList}<br/><br/>üëâ Xem th√™m t·∫°i <a href="/products">trang s·∫£n ph·∫©m</a>`
                }]);
                return;
            }

            // 3. Gi√° s·∫£n ph·∫©m
            if (lowerInput.includes('gi√°') && (lowerInput.includes('c·ªßa') || lowerInput.includes('s·∫£n ph·∫©m'))) {
                const nameMatch = lowerInput.match(/(?:gi√° c·ªßa|gi√°)\s*(.+)/i);
                if (nameMatch) {
                    const keyword = nameMatch[1].trim();
                    const params = {
                        pageNumber: 0,
                        pageSize: 3,
                        sortBy: 'productId',
                        sortOrder: 'asc',
                        categoryId: 0
                    };
                    const response = await GET_ALL(`public/products/keyword/${encodeURIComponent(keyword)}`, params);
                    const products = response.content || [];
                    if (products.length === 0) {
                        setMessages(prev => [...prev, {
                            role: 'bot',
                            content: `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a "${keyword}". H√£y th·ª≠ l·∫°i ho·∫∑c xem <a href="/products">t·∫•t c·∫£ s·∫£n ph·∫©m</a>.`
                        }]);
                        return;
                    }
                    const productList = products.map(p => {
                        const price = p.discount > 0
                            ? (p.price * (100 - p.discount) / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
                            : p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                        const originalPrice = p.discount > 0
                            ? p.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
                            : null;
                        return `üì± ${p.productName}<br/>üí∞ Gi√°: ${price}${p.discount > 0 ? ` <span style="text-decoration: line-through; color: gray;">${originalPrice}</span> (-${p.discount}%)` : ''}`;
                    }).join('<br/><br/>');
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Gi√° c·ªßa s·∫£n ph·∫©m li√™n quan ƒë·∫øn "${keyword}":<br/><br/>${productList}`
                    }]);
                    return;
                }
            }

            // 4. T√¨m s·∫£n ph·∫©m theo t√™n
            if (lowerInput.includes('t√¨m') || lowerInput.includes('th√¥ng tin') || lowerInput.includes('s·∫£n ph·∫©m')) {
                const nameMatch = lowerInput.match(/(?:t√¨m|th√¥ng tin|s·∫£n ph·∫©m)\s*(.+)/i);
                if (nameMatch) {
                    const keyword = nameMatch[1].trim();
                    const params = {
                        pageNumber: 0,
                        pageSize: 5,
                        sortBy: 'productId',
                        sortOrder: 'asc',
                        categoryId: 0
                    };
                    const response = await GET_ALL(`/products/keyword/${encodeURIComponent(keyword)}`, params);
                    const products = response.content || [];
                    if (products.length === 0) {
                        setMessages(prev => [...prev, {
                            role: 'bot',
                            content: `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a "${keyword}". Vui l√≤ng th·ª≠ v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c xem <a href="/products">t·∫•t c·∫£ s·∫£n ph·∫©m</a>.`
                        }]);
                        return;
                    }
                    const productList = products.map(formatProduct).join('<br/><br/>');
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `K·∫øt qu·∫£ t√¨m ki·∫øm cho "${keyword}":<br/><br/>${productList}`
                    }]);
                    return;
                }
            }

            // 5. S·∫£n ph·∫©m khuy·∫øn m√£i
            if (lowerInput.includes('khuy·∫øn m√£i') || lowerInput.includes('gi·∫£m gi√°') || lowerInput.includes('promotion')) {
                const params = { pageNumber: 0, pageSize: 10, sortBy: 'productId', sortOrder: 'asc' };
                const response = await GET_ALL('products/promotions', params);
                const products = response.content || [];
                if (products.length === 0) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m khuy·∫øn m√£i n√†o. H√£y theo d√µi <a href="/products">trang s·∫£n ph·∫©m</a> ƒë·ªÉ c·∫≠p nh·∫≠t nh√©!`
                    }]);
                    return;
                }
                const productList = products.map(formatProduct).join('<br/><br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Danh s√°ch s·∫£n ph·∫©m khuy·∫øn m√£i:<br/><br/>${productList}`
                }]);
                return;
            }

            // 6. Danh m·ª•c s·∫£n ph·∫©m
            if (lowerInput.includes('danh m·ª•c') || lowerInput.includes('category') || lowerInput.includes('lo·∫°i s·∫£n ph·∫©m')) {
                const params = { pageNumber: 0, pageSize: 100, sortBy: 'categoryId', sortOrder: 'asc' };
                const response = await GET_ALL('categories', params);
                const categories = response.content || [];
                if (categories.length === 0) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Hi·ªán t·∫°i kh√¥ng c√≥ danh m·ª•c n√†o. H√£y xem <a href="/products">t·∫•t c·∫£ s·∫£n ph·∫©m</a>.`
                    }]);
                    return;
                }
                const categoryList = categories.map(c =>
                    `üìò <a href="/category/${c.categoryId}">${c.categoryName || c.categoryName}</a> - ${c.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Danh s√°ch danh m·ª•c:<br/><br/>${categoryList}`
                }]);
                return;
            }

            // 7. Gi·ªè h√†ng
            if (lowerInput.includes('gi·ªè h√†ng') || lowerInput.includes('cart')) {
                if (!userEmail) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: '‚ö†Ô∏è Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem gi·ªè h√†ng c·ªßa b·∫°n.'
                    }]);
                    return;
                }
                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }
                let cartId = localStorage.getItem('cartId');
                if (!cartId) {
                    const response = await axios.post(
                        `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/carts`,
                        {},
                        { headers: { Authorization: `Bearer ${token}` } }
                    );
                    cartId = response.data.cartId;
                    localStorage.setItem('cartId', cartId);
                }
                const response = await axios.get(
                    `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/carts/${cartId}`,
                    { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                );
                const cartItems = response.data.products || [];
                if (cartItems.length === 0) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng. H√£y <a href="/products">mua s·∫Øm ngay</a>!`
                    }]);
                    return;
                }
                const cartList = cartItems.map(item =>
                    `üõí <a href="/product/${item.productId}">${item.productName}</a> x${item.cartItemQuantity} - ${(item.price * item.cartItemQuantity).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Gi·ªè h√†ng c·ªßa b·∫°n:<br/><br/>${cartList}<br/><br/>üëâ <a href="/cart">Xem gi·ªè h√†ng</a> ho·∫∑c <a href="/checkout">Thanh to√°n</a>`
                }]);
                return;
            }

            // 8. ƒê∆°n h√†ng
            if (lowerInput.includes('ƒë∆°n h√†ng') || lowerInput.includes('order')) {
                if (!userEmail) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: '‚ö†Ô∏è Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem ƒë∆°n h√†ng c·ªßa b·∫°n.'
                    }]);
                    return;
                }
                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }
                const response = await axios.get(
                    `http://localhost:8080/api/public/users/${encodeURIComponent(userEmail)}/orders`,
                    { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                );
                const orders = response.data || [];
                if (orders.length === 0) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o. H√£y <a href="/products">mua s·∫Øm ngay</a>!`
                    }]);
                    return;
                }
                const orderList = orders.map(o =>
                    `üì¶ <a href="/order/${o.orderId}">ƒê∆°n h√†ng #${o.orderId}</a> - ${o.orderStatus} - ${o.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Danh s√°ch ƒë∆°n h√†ng c·ªßa b·∫°n:<br/><br/>${orderList}`
                }]);
                return;
            }

            // 9. Th√¥ng tin c√° nh√¢n
            if (lowerInput.includes('th√¥ng tin c√° nh√¢n') || lowerInput.includes('profile') || lowerInput.includes('t√†i kho·∫£n') || lowerInput.includes('t√¥i l√† ai')) {
                if (!userEmail) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: '‚ö†Ô∏è Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem th√¥ng tin c√° nh√¢n.'
                    }]);
                    return;
                }
                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }
                const response = await axios.get(
                    `http://localhost:8080/api/public/users/email/${encodeURIComponent(userEmail)}`,
                    { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                );
                const user = response.data;
                const reply = `Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n:<br/><br/>üìß Email: ${user.email}<br/>üë§ T√™n: ${user.firstName} ${user.lastName}<br/>üìç ƒê·ªãa ch·ªâ: ${formatAddress(user.address)}<br/><br/>üëâ <a href="/profile">C·∫≠p nh·∫≠t th√¥ng tin</a>`;
                setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                return;
            }

            // 10. ƒê·ªãa ch·ªâ
            if (lowerInput.includes('ƒë·ªãa ch·ªâ') || lowerInput.includes('address') || lowerInput.includes('c·ª≠a h√†ng')) {
                if (!userEmail) {
                    // G·ªçi API ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ c·ª≠a h√†ng c√≥ status ACTIVE
                    try {
                        const configResponse = await axios.get(
                            'http://localhost:8080/api/public/configs?pageNumber=0&pageSize=100&sortBy=id&sortOrder=ASC',
                            { headers: { Accept: '*/*' } }
                        );

                        const activeConfigs = configResponse.data.content.filter(c => c.status === 'ACTIVE');

                        const storeInfo = activeConfigs.map(c =>
                            `üìç ${c.siteName}: ${c.address}<br/>üìû Hotline: ${c.hotline || 'Kh√¥ng c√≥'}`
                        ).join('<br/><br/>');

                        const reply = `B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. N·∫øu mu·ªën xem ƒë·ªãa ch·ªâ c·ª≠a h√†ng, ƒë√¢y l√† th√¥ng tin chung:<br/><br/>${storeInfo}<br/><br/>Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ xem ƒë·ªãa ch·ªâ c√° nh√¢n.`;
                        setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                        return;
                    } catch (error) {
                        console.error('L·ªói khi l·∫•y th√¥ng tin c·ª≠a h√†ng:', error);
                        setMessages(prev => [...prev, { role: 'bot', content: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin c·ª≠a h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.' }]);
                        return;
                    }
                }

                let token = localStorage.getItem('authToken');
                if (!token) {
                    token = await authenticate();
                    if (!token) return;
                }

                try {
                    const userResponse = await axios.get(
                        `http://localhost:8080/api/public/users/email/${encodeURIComponent(userEmail)}`,
                        { headers: { Authorization: `Bearer ${token}`, Accept: '*/*' } }
                    );
                    const user = userResponse.data;

                    // L·∫•y th√¥ng tin c·ª≠a h√†ng ƒëang ho·∫°t ƒë·ªông
                    const configResponse = await axios.get(
                        'http://localhost:8080/api/public/configs?pageNumber=0&pageSize=100&sortBy=id&sortOrder=ASC',
                        { headers: { Accept: '*/*' } }
                    );

                    const activeConfigs = configResponse.data.content.filter(c => c.status === 'ACTIVE');

                    const storeInfo = activeConfigs.map(c =>
                        `üìç ${c.siteName}: ${c.address}<br/>üìû Hotline: ${c.hotline || 'Kh√¥ng c√≥'}`
                    ).join('<br/><br/>');

                    const reply = `ƒê·ªãa ch·ªâ c·ªßa b·∫°n:<br/><br/>üìç ${formatAddress(user.address) || 'Ch∆∞a c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ'}<br/><br/>üëâ <a href="/profile">C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ</a><br/><br/>${storeInfo}`;
                    setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                    return;
                } catch (error) {
                    console.error('L·ªói khi l·∫•y ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng ho·∫∑c c·∫•u h√¨nh:', error);
                    setMessages(prev => [...prev, { role: 'bot', content: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i sau.' }]);
                    return;
                }
            }


            // 11. Li√™n h·ªá
            if (lowerInput.includes('li√™n h·ªá') || lowerInput.includes('contact') || lowerInput.includes('h·ªó tr·ª£')) {
                const response = await GET_ALL('public/contacts', { pageNumber: 0, pageSize: 1 });
                const contacts = response.content || [];
                const contactInfo = contacts.length > 0
                    ? `üìß Email: ${contacts[0].email}<br/>üìû ƒêi·ªán tho·∫°i: ${contacts[0].phone}<br/>üìù N·ªôi dung: ${contacts[0].message || 'Kh√¥ng c√≥ th√¥ng tin'}`
                    : 'üìç MHP Store: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM, Vi·ªát Nam<br/>üìû Hotline: 0909 123 456<br/>üìß Email: support@mhpstore.com';
                const reply = `Th√¥ng tin li√™n h·ªá:<br/><br/>${contactInfo}<br/><br/>üëâ G·ª≠i y√™u c·∫ßu h·ªó tr·ª£ t·∫°i <a href="/contact">trang li√™n h·ªá</a>`;
                setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                return;
            }

            // 12. Blog
            if (lowerInput.includes('blog') || lowerInput.includes('b√†i vi·∫øt') || lowerInput.includes('tin t·ª©c')) {
                const params = { pageNumber: 0, pageSize: 5, sortBy: 'id', sortOrder: 'desc' };
                const response = await GET_ALL('public/blogs', params);
                const blogs = response.content || [];
                if (blogs.length === 0) {
                    setMessages(prev => [...prev, {
                        role: 'bot',
                        content: `Hi·ªán t·∫°i ch∆∞a c√≥ b√†i vi·∫øt n√†o. H√£y gh√© thƒÉm <a href="/blog">trang blog</a> ƒë·ªÉ c·∫≠p nh·∫≠t sau!`
                    }]);
                    return;
                }
                const blogList = blogs.map(b =>
                    `üìù <a href="/blog/${b.id}">${b.title}</a> - ${new Date(b.createdAt).toLocaleDateString('vi-VN')}`
                ).join('<br/>');
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Danh s√°ch b√†i vi·∫øt m·ªõi nh·∫•t:<br/><br/>${blogList}<br/><br/>üëâ Xem t·∫•t c·∫£ t·∫°i <a href="/blog">trang blog</a>`
                }]);
                return;
            }

            // 13. C·∫•u h√¨nh trang web
            if (lowerInput.includes('c·∫•u h√¨nh') || lowerInput.includes('config') || lowerInput.includes('th√¥ng tin c·ª≠a h√†ng')) {
                const response = await GET_ALL('public/configs', { pageNumber: 0, pageSize: 1 });
                const configs = response.content || [];
                const configInfo = configs.length > 0
                    ? `üè¨ T√™n c·ª≠a h√†ng: ${configs[0].storeName || 'MHP Store'}<br/>üìú M√¥ t·∫£: ${configs[0].description || 'Kh√¥ng c√≥ m√¥ t·∫£'}<br/>üìß Email: ${configs[0].email || 'support@mhpstore.com'}`
                    : 'üè¨ MHP Store: C·ª≠a h√†ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu<br/>üìß Email: support@mhpstore.com';
                setMessages(prev => [...prev, {
                    role: 'bot',
                    content: `Th√¥ng tin c·ª≠a h√†ng:<br/><br/>${configInfo}<br/><br/>üëâ Li√™n h·ªá ch√∫ng t√¥i t·∫°i <a href="/contact">trang li√™n h·ªá</a>`
                }]);
                return;
            }

            // 14. T·ªïng quan v·ªÅ trang web
            if (lowerInput.includes('m·ªçi th·ª©') || lowerInput.includes('trang web') || lowerInput.includes('c√≥ g√¨')) {
                let reply = `T·ªïng quan v·ªÅ MHP Store:<br/><br/>`;

                const productResponse = await GET_ALL('public/products', { pageNumber: 0, pageSize: 3 });
                const products = productResponse.content || [];
                reply += `üì± <strong>S·∫£n ph·∫©m</strong>: ${productResponse.totalElements || 0} s·∫£n ph·∫©m. V√≠ d·ª•:<br/>${products.map(formatProduct).join('<br/>') || 'Kh√¥ng c√≥ s·∫£n ph·∫©m.'}<br/><br/>`;

                const promoResponse = await GET_ALL('public/products/promotions', { pageNumber: 0, pageSize: 3 });
                const promos = promoResponse.content || [];
                reply += `üéâ <strong>Khuy·∫øn m√£i</strong>:<br/>${promos.map(formatProduct).join('<br/>') || 'Kh√¥ng c√≥ khuy·∫øn m√£i.'}<br/><br/>`;

                const categoryResponse = await GET_ALL('public/categories', { pageNumber: 0, pageSize: 3 });
                const categories = categoryResponse.content || [];
                reply += `üìã <strong>Danh m·ª•c</strong>:<br/>${categories.map(c => `<a href="/category/${c.categoryId}">${c.categoryName}</a>`).join('<br/>') || 'Kh√¥ng c√≥ danh m·ª•c.'}<br/><br/>`;

                const blogResponse = await GET_ALL('public/blogs', { pageNumber: 0, pageSize: 2 });
                const blogs = blogResponse.content || [];
                reply += `üìù <strong>B√†i vi·∫øt</strong>:<br/>${blogs.map(b => `<a href="/blog/${b.id}">${b.title}</a>`).join('<br/>') || 'Kh√¥ng c√≥ b√†i vi·∫øt.'}<br/><br/>`;

                reply += `üëâ Kh√°m ph√° th√™m t·∫°i <a href="/">trang ch·ªß</a>`;
                setMessages(prev => [...prev, { role: 'bot', content: reply }]);
                return;
            }

            // 15. C√¢u h·ªèi kh√¥ng li√™n quan (g·ªçi Gemini AI)
            const res = await axios.post(
                'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyAgCIH5TI_2GaNBzPRLI55Wk4VGWL84jpk',
                {
                    contents: [{
                        parts: [{
                            text: `B·∫°n l√† chatbot c·ªßa MHP Store, m·ªôt c·ª≠a h√†ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ t·∫°i Vi·ªát Nam. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát: "${input}"`
                        }]
                    }]
                },
                { headers: { 'Content-Type': 'application/json' } }
            );
            const geminiResponse = res.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. H√£y th·ª≠ h·ªèi r√µ h∆°n nh√©! üòä';
            setMessages(prev => [...prev, { role: 'bot', content: geminiResponse }]);
        } catch (error) {
            console.error('L·ªói:', error);
            let errorMessage = '‚ö†Ô∏è C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!';
            if (error.response?.status === 401) {
                errorMessage = '‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.';
            } else if (error.response?.status === 404) {
                errorMessage = '‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu. H√£y ki·ªÉm tra c√¢u h·ªèi ho·∫∑c th·ª≠ l·∫°i!';
            }
            setMessages(prev => [...prev, { role: 'bot', content: errorMessage }]);
        } finally {
            setLoading(false);
        }
    };

    // X·ª≠ l√Ω nh·∫•n Enter ƒë·ªÉ g·ª≠i
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !loading) {
            handleSend();
        }
    };

    return (
        <div className="chatbot-container">
            <h2 className="chatbot-title">MHP Chatbot</h2>
            <div className="chatbox" ref={chatBoxRef}>
                {messages.map((msg, index) => (
                    <div
                        key={index}
                        className={`message ${msg.role === 'user' ? 'user-message' : 'bot-message'}`}
                        dangerouslySetInnerHTML={{
                            __html: `<strong>${msg.role === 'user' ? 'B·∫°n: ' : 'MHP Bot: '}</strong>${msg.content}`
                        }}
                    />
                ))}
            </div>
            <div className="input-area">
                <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨..."
                    disabled={loading}
                />
                <button
                    onClick={handleSend}
                    disabled={loading}
                >
                    {loading ? 'ƒêang x·ª≠ l√Ω...' : 'G·ª≠i'}
                </button>
            </div>
        </div>
    );
};

export default ChatBotGemini;